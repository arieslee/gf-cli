// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package comment

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
)

// Entity is the golang structure for table bingo_comment.
type Entity struct {
    Id        int    `orm:"id,primary" json:"id"`         //             
    PostId    int    `orm:"post_id"    json:"post_id"`    // 文章id      
    AuthorId  int    `orm:"author_id"  json:"author_id"`  // 发布人id    
    Author    string `orm:"author"     json:"author"`     // 发布人      
    Content   string `orm:"content"    json:"content"`    // 内容        
    CreatedAt int    `orm:"created_at" json:"created_at"` // 创建时间    
    Email     string `orm:"email"      json:"email"`      // 邮件        
    Url       string `orm:"url"        json:"url"`        // 主页        
    Ip        string `orm:"ip"         json:"ip"`         // IP地址      
    ParentId  int    `orm:"parent_id"  json:"parent_id"`  // 上级id      
    ApiId     string `orm:"api_id"     json:"api_id"`     // API编号     
    UserAgent string `orm:"user_agent" json:"user_agent"` // 浏览器特征  
    UpdatedAt int    `orm:"updated_at" json:"updated_at"` // 更新时间    
    Status    int    `orm:"status"     json:"status"`     // 状态        
}

// Comment is alias of Entity, which some developers say they just want.
type Comment = Entity

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}