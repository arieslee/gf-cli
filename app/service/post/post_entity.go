// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package post

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
)

// Entity is the golang structure for table bingo_post.
type Entity struct {
    Id           int    `orm:"id,primary"    json:"id"`            //               
    Cid          int    `orm:"cid"           json:"cid"`           // 分类id        
    Title        string `orm:"title"         json:"title"`         // 标题          
    Slug         string `orm:"slug"          json:"slug"`          // 缩略名        
    CreatedAt    int    `orm:"created_at"    json:"created_at"`    // 创建时间      
    Intro        string `orm:"intro"         json:"intro"`         // 摘要          
    AuthorId     int    `orm:"author_id"     json:"author_id"`     // 发布人id      
    Views        int    `orm:"views"         json:"views"`         // 浏览次数      
    UpdatedAt    int    `orm:"updated_at"    json:"updated_at"`    // 更新时间      
    ListOrder    int    `orm:"list_order"    json:"list_order"`    // 排序          
    Cover        string `orm:"cover"         json:"cover"`         // 封面          
    JumpUrl      string `orm:"jump_url"      json:"jump_url"`      // 跳转链接      
    AllowComment int    `orm:"allow_comment" json:"allow_comment"` // 是否允许评论  
    CommentNum   int    `orm:"comment_num"   json:"comment_num"`   // 评论数量      
    Content      string `orm:"content"       json:"content"`       // 内容          
    Password     string `orm:"password"      json:"password"`      // 密码          
    Template     string `orm:"template"      json:"template"`      // 模板          
    Status       int    `orm:"status"        json:"status"`        // 状态          
    Type         string `orm:"type"          json:"type"`          // 类型          
}

// Post is alias of Entity, which some developers say they just want.
type Post = Entity

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}